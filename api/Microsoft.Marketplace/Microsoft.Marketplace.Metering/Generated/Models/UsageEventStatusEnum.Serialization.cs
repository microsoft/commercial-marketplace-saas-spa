// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.Marketplace.Metering.Models
{
    internal static class UsageEventStatusEnumExtensions
    {
        public static string ToSerialString(this UsageEventStatusEnum value) => value switch
        {
            UsageEventStatusEnum.Accepted => "Accepted",
            UsageEventStatusEnum.Expired => "Expired",
            UsageEventStatusEnum.Duplicate => "Duplicate",
            UsageEventStatusEnum.Error => "Error",
            UsageEventStatusEnum.ResourceNotFound => "ResourceNotFound",
            UsageEventStatusEnum.ResourceNotAuthorized => "ResourceNotAuthorized",
            UsageEventStatusEnum.InvalidDimensionBadArgument => "InvalidDimension|BadArgument",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown UsageEventStatusEnum value.")
        };

        public static UsageEventStatusEnum ToUsageEventStatusEnum(this string value)
        {
            if (string.Equals(value, "Accepted", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.Accepted;
            if (string.Equals(value, "Expired", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.Expired;
            if (string.Equals(value, "Duplicate", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.Duplicate;
            if (string.Equals(value, "Error", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.Error;
            if (string.Equals(value, "ResourceNotFound", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.ResourceNotFound;
            if (string.Equals(value, "ResourceNotAuthorized", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.ResourceNotAuthorized;
            if (string.Equals(value, "InvalidDimension|BadArgument", StringComparison.InvariantCultureIgnoreCase)) return UsageEventStatusEnum.InvalidDimensionBadArgument;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown UsageEventStatusEnum value.");
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Marketplace.Metering.Models
{
    /// <summary> Accepted|NotProcessed|Expired. </summary>
    internal readonly partial struct UsageEventConflictResponseAdditionalInfoStatus : IEquatable<UsageEventConflictResponseAdditionalInfoStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="UsageEventConflictResponseAdditionalInfoStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UsageEventConflictResponseAdditionalInfoStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcceptedValue = "Accepted";
        private const string NotProcessedValue = "NotProcessed";
        private const string ExpiredValue = "Expired";

        /// <summary> Accepted. </summary>
        public static UsageEventConflictResponseAdditionalInfoStatus Accepted { get; } = new UsageEventConflictResponseAdditionalInfoStatus(AcceptedValue);
        /// <summary> NotProcessed. </summary>
        public static UsageEventConflictResponseAdditionalInfoStatus NotProcessed { get; } = new UsageEventConflictResponseAdditionalInfoStatus(NotProcessedValue);
        /// <summary> Expired. </summary>
        public static UsageEventConflictResponseAdditionalInfoStatus Expired { get; } = new UsageEventConflictResponseAdditionalInfoStatus(ExpiredValue);
        /// <summary> Determines if two <see cref="UsageEventConflictResponseAdditionalInfoStatus"/> values are the same. </summary>
        public static bool operator ==(UsageEventConflictResponseAdditionalInfoStatus left, UsageEventConflictResponseAdditionalInfoStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UsageEventConflictResponseAdditionalInfoStatus"/> values are not the same. </summary>
        public static bool operator !=(UsageEventConflictResponseAdditionalInfoStatus left, UsageEventConflictResponseAdditionalInfoStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UsageEventConflictResponseAdditionalInfoStatus"/>. </summary>
        public static implicit operator UsageEventConflictResponseAdditionalInfoStatus(string value) => new UsageEventConflictResponseAdditionalInfoStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UsageEventConflictResponseAdditionalInfoStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UsageEventConflictResponseAdditionalInfoStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}

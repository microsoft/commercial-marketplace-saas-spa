// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Marketplace.SaaS.Models
{
    /// <summary> The request must send the following parameters as a URL Encoded form; grant_type - client_credentials; resource - 62d94f6c-d599-489b-a797-3e10e42fbe22; client_id - AAD Registered App Client ID; client_secret - AAD Registered App Client Secret. </summary>
    internal readonly partial struct ApiVersion : IEquatable<ApiVersion>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ApiVersion"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApiVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TwoThousandEighteen0831Value = "2018-08-31";
        private const string TwoThousandEighteen0915Value = "2018-09-15";

        /// <summary> 2018-08-31. </summary>
        public static ApiVersion TwoThousandEighteen0831 { get; } = new ApiVersion(TwoThousandEighteen0831Value);
        /// <summary> 2018-09-15. </summary>
        public static ApiVersion TwoThousandEighteen0915 { get; } = new ApiVersion(TwoThousandEighteen0915Value);
        /// <summary> Determines if two <see cref="ApiVersion"/> values are the same. </summary>
        public static bool operator ==(ApiVersion left, ApiVersion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApiVersion"/> values are not the same. </summary>
        public static bool operator !=(ApiVersion left, ApiVersion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApiVersion"/>. </summary>
        public static implicit operator ApiVersion(string value) => new ApiVersion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApiVersion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApiVersion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}

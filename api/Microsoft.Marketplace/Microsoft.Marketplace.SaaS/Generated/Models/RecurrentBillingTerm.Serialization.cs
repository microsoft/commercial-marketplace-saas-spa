// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Marketplace.SaaS.Models
{
    public partial class RecurrentBillingTerm
    {
        internal static RecurrentBillingTerm DeserializeRecurrentBillingTerm(JsonElement element)
        {
            Optional<string> currency = default;
            Optional<float> price = default;
            Optional<TermUnitEnum> termUnit = default;
            Optional<string> termDescription = default;
            Optional<IReadOnlyList<MeteringedQuantityIncluded>> meteredQuantityIncluded = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("currency"))
                {
                    currency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("price"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    price = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("termUnit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    termUnit = property.Value.GetString().ToTermUnitEnum();
                    continue;
                }
                if (property.NameEquals("termDescription"))
                {
                    termDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meteredQuantityIncluded"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MeteringedQuantityIncluded> array = new List<MeteringedQuantityIncluded>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MeteringedQuantityIncluded.DeserializeMeteringedQuantityIncluded(item));
                    }
                    meteredQuantityIncluded = array;
                    continue;
                }
            }
            return new RecurrentBillingTerm(currency.Value, Optional.ToNullable(price), Optional.ToNullable(termUnit), termDescription.Value, Optional.ToList(meteredQuantityIncluded));
        }
    }
}

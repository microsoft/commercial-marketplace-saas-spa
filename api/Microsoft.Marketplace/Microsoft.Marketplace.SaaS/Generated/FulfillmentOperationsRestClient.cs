// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Marketplace.SaaS.Models;

namespace Microsoft.Marketplace.SaaS
{
    internal partial class FulfillmentOperationsRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of FulfillmentOperationsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public FulfillmentOperationsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2018-08-31")
        {
            endpoint ??= new Uri("https://marketplaceapi.microsoft.com/api");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateResolveRequest(string xMsMarketplaceToken, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/resolve", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("x-ms-marketplace-token", xMsMarketplaceToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&apos;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only. </summary>
        /// <param name="xMsMarketplaceToken"> The token query parameter in the URL when the user is redirected to the SaaS partner&apos;s website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xMsMarketplaceToken"/> is null. </exception>
        public async Task<Response<ResolvedSubscription>> ResolveAsync(string xMsMarketplaceToken, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (xMsMarketplaceToken == null)
            {
                throw new ArgumentNullException(nameof(xMsMarketplaceToken));
            }

            using var message = CreateResolveRequest(xMsMarketplaceToken, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResolvedSubscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ResolvedSubscription.DeserializeResolvedSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<ResolvedSubscription>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&apos;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only. </summary>
        /// <param name="xMsMarketplaceToken"> The token query parameter in the URL when the user is redirected to the SaaS partner&apos;s website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xMsMarketplaceToken"/> is null. </exception>
        public Response<ResolvedSubscription> Resolve(string xMsMarketplaceToken, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (xMsMarketplaceToken == null)
            {
                throw new ArgumentNullException(nameof(xMsMarketplaceToken));
            }

            using var message = CreateResolveRequest(xMsMarketplaceToken, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ResolvedSubscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ResolvedSubscription.DeserializeResolvedSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<ResolvedSubscription>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSubscriptionsRequest(string continuationToken, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all the SaaS subscriptions for a publisher. </summary>
        /// <param name="continuationToken"> Optional value, only used for ListSubscriptions. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SubscriptionsResponse>> ListSubscriptionsAsync(string continuationToken = null, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListSubscriptionsRequest(continuationToken, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SubscriptionsResponse.DeserializeSubscriptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 500:
                    return Response.FromValue<SubscriptionsResponse>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists all the SaaS subscriptions for a publisher. </summary>
        /// <param name="continuationToken"> Optional value, only used for ListSubscriptions. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SubscriptionsResponse> ListSubscriptions(string continuationToken = null, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListSubscriptionsRequest(continuationToken, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SubscriptionsResponse.DeserializeSubscriptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 500:
                    return Response.FromValue<SubscriptionsResponse>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSubscriptionRequest(Guid subscriptionId, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the specified SaaS subscription. Use this call to get license information and plan information. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Subscription>> GetSubscriptionAsync(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSubscriptionRequest(subscriptionId, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Subscription value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Subscription.DeserializeSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<Subscription>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the specified SaaS subscription. Use this call to get license information and plan information. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Subscription> GetSubscription(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetSubscriptionRequest(subscriptionId, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Subscription value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Subscription.DeserializeSubscription(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<Subscription>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateSubscriptionRequest(Guid subscriptionId, SubscriberPlan body, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Use this call to update the plan, the user count (quantity), or both. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="body"> The SubscriberPlan to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<ResponseWithHeaders<FulfillmentUpdateSubscriptionHeaders>> UpdateSubscriptionAsync(Guid subscriptionId, SubscriberPlan body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateSubscriptionRequest(subscriptionId, body, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new FulfillmentUpdateSubscriptionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                case 403:
                case 404:
                case 500:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Use this call to update the plan, the user count (quantity), or both. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="body"> The SubscriberPlan to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public ResponseWithHeaders<FulfillmentUpdateSubscriptionHeaders> UpdateSubscription(Guid subscriptionId, SubscriberPlan body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateSubscriptionRequest(subscriptionId, body, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            var headers = new FulfillmentUpdateSubscriptionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                case 403:
                case 404:
                case 500:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteSubscriptionRequest(Guid subscriptionId, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            return message;
        }

        /// <summary> Unsubscribe and delete the specified subscription. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<FulfillmentDeleteSubscriptionHeaders>> DeleteSubscriptionAsync(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteSubscriptionRequest(subscriptionId, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new FulfillmentDeleteSubscriptionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                case 403:
                case 404:
                case 500:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Unsubscribe and delete the specified subscription. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<FulfillmentDeleteSubscriptionHeaders> DeleteSubscription(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteSubscriptionRequest(subscriptionId, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            var headers = new FulfillmentDeleteSubscriptionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                case 403:
                case 404:
                case 500:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListAvailablePlansRequest(Guid subscriptionId, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/listAvailablePlans", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Use this call to find out if there are any private or public offers for the current publisher. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SubscriptionPlans>> ListAvailablePlansAsync(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListAvailablePlansRequest(subscriptionId, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionPlans value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SubscriptionPlans.DeserializeSubscriptionPlans(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<SubscriptionPlans>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Use this call to find out if there are any private or public offers for the current publisher. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SubscriptionPlans> ListAvailablePlans(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListAvailablePlansRequest(subscriptionId, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionPlans value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SubscriptionPlans.DeserializeSubscriptionPlans(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<SubscriptionPlans>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateActivateSubscriptionRequest(Guid subscriptionId, SubscriberPlan body, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/activate", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Use this call to activate a subscription. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="body"> The SubscriberPlan to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> ActivateSubscriptionAsync(Guid subscriptionId, SubscriberPlan body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateActivateSubscriptionRequest(subscriptionId, body, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 403:
                case 404:
                case 500:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Use this call to activate a subscription. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="body"> The SubscriberPlan to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response ActivateSubscription(Guid subscriptionId, SubscriberPlan body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateActivateSubscriptionRequest(subscriptionId, body, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 403:
                case 404:
                case 500:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSubscriptionsNextPageRequest(string nextLink, string continuationToken, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all the SaaS subscriptions for a publisher. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="continuationToken"> Optional value, only used for ListSubscriptions. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<SubscriptionsResponse>> ListSubscriptionsNextPageAsync(string nextLink, string continuationToken = null, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListSubscriptionsNextPageRequest(nextLink, continuationToken, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SubscriptionsResponse.DeserializeSubscriptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 500:
                    return Response.FromValue<SubscriptionsResponse>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists all the SaaS subscriptions for a publisher. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="continuationToken"> Optional value, only used for ListSubscriptions. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<SubscriptionsResponse> ListSubscriptionsNextPage(string nextLink, string continuationToken = null, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListSubscriptionsNextPageRequest(nextLink, continuationToken, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SubscriptionsResponse.DeserializeSubscriptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 403:
                case 500:
                    return Response.FromValue<SubscriptionsResponse>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}

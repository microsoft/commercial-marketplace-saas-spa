// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Marketplace.SaaS.Models;

namespace Microsoft.Marketplace.SaaS
{
    internal partial class SubscriptionOperationsRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of SubscriptionOperationsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public SubscriptionOperationsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2018-08-31")
        {
            endpoint ??= new Uri("https://marketplaceapi.microsoft.com/api");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListOperationsRequest(Guid subscriptionId, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/operations", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the outstanding operations for the current publisher. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<OperationList>> ListOperationsAsync(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListOperationsRequest(subscriptionId, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OperationList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OperationList.DeserializeOperationList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<OperationList>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the outstanding operations for the current publisher. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<OperationList> ListOperations(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListOperationsRequest(subscriptionId, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OperationList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OperationList.DeserializeOperationList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<OperationList>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationStatusRequest(Guid subscriptionId, Guid operationId, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity). </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<Operation>> GetOperationStatusAsync(Guid subscriptionId, Guid operationId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationStatusRequest(subscriptionId, operationId, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Operation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Operation.DeserializeOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<Operation>(null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity). </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Operation> GetOperationStatus(Guid subscriptionId, Guid operationId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetOperationStatusRequest(subscriptionId, operationId, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Operation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Operation.DeserializeOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 400:
                case 403:
                case 404:
                case 500:
                    return Response.FromValue<Operation>(null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateOperationStatusRequest(Guid subscriptionId, Guid operationId, UpdateOperation body, Guid? requestId, Guid? correlationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/saas/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (requestId != null)
            {
                request.Headers.Add("x-ms-requestid", requestId.Value);
            }
            if (correlationId != null)
            {
                request.Headers.Add("x-ms-correlationid", correlationId.Value);
            }
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Update the status of an operation to indicate success or failure with the provided values. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="body"> The UpdateOperation to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public async Task<Response> UpdateOperationStatusAsync(Guid subscriptionId, Guid operationId, UpdateOperation body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateOperationStatusRequest(subscriptionId, operationId, body, requestId, correlationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 403:
                case 404:
                case 409:
                case 500:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the status of an operation to indicate success or failure with the provided values. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="body"> The UpdateOperation to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public Response UpdateOperationStatus(Guid subscriptionId, Guid operationId, UpdateOperation body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateUpdateOperationStatusRequest(subscriptionId, operationId, body, requestId, correlationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 403:
                case 404:
                case 409:
                case 500:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}

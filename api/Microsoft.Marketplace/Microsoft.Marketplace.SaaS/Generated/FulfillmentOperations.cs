// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Marketplace.SaaS.Models;

namespace Microsoft.Marketplace.SaaS
{
    /// <summary> The Fulfillment service client. </summary>
    public partial class FulfillmentOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal FulfillmentOperationsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of FulfillmentOperations for mocking. </summary>
        protected FulfillmentOperations()
        {
        }
        /// <summary> Initializes a new instance of FulfillmentOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal FulfillmentOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2018-08-31")
        {
            RestClient = new FulfillmentOperationsRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&apos;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only. </summary>
        /// <param name="xMsMarketplaceToken"> The token query parameter in the URL when the user is redirected to the SaaS partner&apos;s website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ResolvedSubscription>> ResolveAsync(string xMsMarketplaceToken, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.Resolve");
            scope.Start();
            try
            {
                return await RestClient.ResolveAsync(xMsMarketplaceToken, requestId, correlationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner&apos;s website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only. </summary>
        /// <param name="xMsMarketplaceToken"> The token query parameter in the URL when the user is redirected to the SaaS partner&apos;s website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ResolvedSubscription> Resolve(string xMsMarketplaceToken, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.Resolve");
            scope.Start();
            try
            {
                return RestClient.Resolve(xMsMarketplaceToken, requestId, correlationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified SaaS subscription. Use this call to get license information and plan information. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Subscription>> GetSubscriptionAsync(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.GetSubscription");
            scope.Start();
            try
            {
                return await RestClient.GetSubscriptionAsync(subscriptionId, requestId, correlationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified SaaS subscription. Use this call to get license information and plan information. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Subscription> GetSubscription(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.GetSubscription");
            scope.Start();
            try
            {
                return RestClient.GetSubscription(subscriptionId, requestId, correlationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Use this call to find out if there are any private or public offers for the current publisher. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SubscriptionPlans>> ListAvailablePlansAsync(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ListAvailablePlans");
            scope.Start();
            try
            {
                return await RestClient.ListAvailablePlansAsync(subscriptionId, requestId, correlationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Use this call to find out if there are any private or public offers for the current publisher. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionPlans> ListAvailablePlans(Guid subscriptionId, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ListAvailablePlans");
            scope.Start();
            try
            {
                return RestClient.ListAvailablePlans(subscriptionId, requestId, correlationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Use this call to activate a subscription. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="body"> The SubscriberPlan to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ActivateSubscriptionAsync(Guid subscriptionId, SubscriberPlan body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ActivateSubscription");
            scope.Start();
            try
            {
                return await RestClient.ActivateSubscriptionAsync(subscriptionId, body, requestId, correlationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Use this call to activate a subscription. </summary>
        /// <param name="subscriptionId"> The Uuid to use. </param>
        /// <param name="body"> The SubscriberPlan to use. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ActivateSubscription(Guid subscriptionId, SubscriberPlan body, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ActivateSubscription");
            scope.Start();
            try
            {
                return RestClient.ActivateSubscription(subscriptionId, body, requestId, correlationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the SaaS subscriptions for a publisher. </summary>
        /// <param name="continuationToken"> Optional value, only used for ListSubscriptions. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Subscription> ListSubscriptionsAsync(string continuationToken = null, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Subscription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ListSubscriptions");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSubscriptionsAsync(continuationToken, requestId, correlationId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Subscriptions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Subscription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ListSubscriptions");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSubscriptionsNextPageAsync(nextLink, continuationToken, requestId, correlationId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Subscriptions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all the SaaS subscriptions for a publisher. </summary>
        /// <param name="continuationToken"> Optional value, only used for ListSubscriptions. </param>
        /// <param name="requestId"> A unique string value for tracking the request from the client, preferably a GUID. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="correlationId"> A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn&apos;t provided, one will be generated and provided in the response headers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Subscription> ListSubscriptions(string continuationToken = null, Guid? requestId = null, Guid? correlationId = null, CancellationToken cancellationToken = default)
        {
            Page<Subscription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ListSubscriptions");
                scope.Start();
                try
                {
                    var response = RestClient.ListSubscriptions(continuationToken, requestId, correlationId, cancellationToken);
                    return Page.FromValues(response.Value.Subscriptions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Subscription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FulfillmentOperations.ListSubscriptions");
                scope.Start();
                try
                {
                    var response = RestClient.ListSubscriptionsNextPage(nextLink, continuationToken, requestId, correlationId, cancellationToken);
                    return Page.FromValues(response.Value.Subscriptions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
